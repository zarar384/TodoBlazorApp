@page "/todolist"
@using TodoWeb.IServices
@using TodoWeb.Models
@using TodoWeb.Components
@inject ITodoService TodoService

<PageTitle>Todo List</PageTitle>

@code {
    private int pageSize = 10;
    private int todoCount;
    private int currentPageIndex = 0;
    private List<TodoDto> todos = new List<TodoDto>();
    private TodoDto newTodo = new TodoDto();
    private bool isAddNewTodo = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            todoCount = await TodoService.GetCount();

            await LoadTodoAsync(currentPageIndex);
        }
        catch
        {

        }
    }

    private async Task LoadTodoAsync(int pageIndex)
    {
        try
        {
            currentPageIndex = pageIndex;
            todos = await TodoService.GetTodoAsync(pageIndex, pageSize);

            if (isAddNewTodo)
            {
                isAddNewTodo = false;
            }
        }
        catch
        {

        }
    }

    private async Task ToggleComplete(TodoDto todo)
    {
        try
        {
            todo.IsComplete = !todo.IsComplete;

            await TodoService.UpdateAsync(todo.Id, todo);
        }
        catch
        {

        }
    }

    private async Task DeleteTodo(TodoDto todo)
    {
        try
        {
            await TodoService.DeleteAsync(todo.Id);

            todos.Remove(todo);
            todoCount--;

            if (todos.Count == 0 && todoCount > 0)
            {
                int lastPageIndex = (todoCount - 1) / pageSize;
                await LoadTodoAsync(lastPageIndex);
            }
            else
            {
                await LoadTodoAsync(currentPageIndex);
            }
        }
        catch
        {

        }
    }

    private async void ShowAddNewTodo()
    {
        newTodo = new TodoDto();

        int lastPageIndex = todoCount / pageSize;

        if (currentPageIndex != lastPageIndex)
        {
            await LoadTodoAsync(lastPageIndex);
        }

        isAddNewTodo = true;
    }

    private async Task SaveNewTodo()
    {
        try
        {
            var nt = await TodoService.CreateAsync(newTodo);
            todos.Add(nt);
            todoCount++;

            if (todos.Count == 1)
            {
                await LoadTodoAsync(currentPageIndex);
            }

            isAddNewTodo = false;
        }
        catch
        {

        }
    }

    private async void CancelNewTodo()
    {
        isAddNewTodo = false;
        newTodo = new TodoDto();

        if (todos.Count == 0)
        {
            await LoadTodoAsync(currentPageIndex);
        }
    }
}
<div style="padding-bottom: 15px">
    <div style="visibility: @(!isAddNewTodo ? "hidden" : "visible"); height: 40px;"></div>
    <button class="btn-add" @onclick="ShowAddNewTodo" style="visibility: @(!isAddNewTodo ? "visible" : "hidden")">Add</button>
</div>
<div class="container-wrapper">
    <div class="card-container">
        @foreach (var todo in todos)
        {
            <li class="card">
                <div class="card-body" @onclick="()=>ToggleComplete(todo)">
                    <h5 class="card-title" style="text-decoration: @(todo.IsComplete ? "line-through" : "none");">@todo.Id) @todo.Title</h5>
                    <p class="card-description" style="text-decoration: @(todo.IsComplete ? "line-through" : "none");">@todo.Description</p>
                </div>
                <div class="card-buttons">
                    <button class="btn-delete" @onclick="()=>DeleteTodo(todo)">Delete</button>
                </div>
            </li>
        }
        @if (isAddNewTodo)
        {
            <NewCard T="TodoDto" NewItem="newTodo" OnSave="SaveNewTodo" OnCancel="CancelNewTodo" />
        }
    </div>
    <div class="pagination-container">
        <Pagination TotalItems="todoCount" MaxPageSize="pageSize" OnPageChanged="LoadTodoAsync"></Pagination>
    </div>
</div>
