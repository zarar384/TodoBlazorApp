@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int MaxPageSize { get; set; } = 10;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public int CurrentPage { get; set; } = 0;

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / MaxPageSize);

    private bool GoPrevious => CurrentPage > 0;
    private bool GoNext => CurrentPage < TotalPages - 1;

    private async Task SetPage(int pageIndex)
    {
        if (pageIndex != CurrentPage && pageIndex >= 0 &&
            pageIndex < TotalPages)
        {
            CurrentPage = pageIndex;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task NextPage()
    {
        if (GoNext)
        {
            CurrentPage++;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (GoPrevious)
        {
            CurrentPage--;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task LastPage()
    {
        if (GoNext)
        {
            CurrentPage = TotalPages - 1;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task FirstPage()
    {
        if (GoPrevious)
        {
            CurrentPage = 0;
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }
}

<div class="pagination">
    <button @onclick="FirstPage" disabled="@(!GoPrevious)">F</button>
    <button @onclick="PreviousPage" disabled="@(!GoPrevious)">P</button>
    @foreach (var pageNumber in Enumerable.Range(1, TotalPages))
    {
        <button @onclick="@(async()=> await SetPage(pageNumber-1))" class="@(pageNumber-1==CurrentPage?"active":"")">@pageNumber</button>
    }
    <button @onclick="NextPage" disabled="@(!GoNext)">N</button>
    <button @onclick="LastPage" disabled="@(!GoNext)">L</button>
</div>